name: Manual Release

on:
#  schedule:
#  - cron: "0 */2 * * *"    # Every 2 hours

  workflow_dispatch:
    inputs:
      revision:
        description: 'Revision'
        required: false
        default: ''
        
  repository_dispatch:
    inputs:
      revision:
        description: 'Revision'
        required: false
        default: ''

concurrency: 
  group: Snapshot Build
  cancel-in-progress: true

jobs:
  create_release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        env:
          TAG_NAME: ${{ github.ref }}
          RELEASE_NAME: ${{ github.ref }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            const { TAG_NAME, RELEASE_NAME } = process.env;
            const createReleaseResponse = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME.replace('refs/tags/', ''),
              name: RELEASE_NAME.replace('refs/tags/', ''),
              draft: true,
              prerelease: false,
              target_commitish: context.sha
            });
            core.setOutput('release_id', createReleaseResponse.data.id);
            core.setOutput('upload_url', createReleaseResponse.data.upload_url);

  build_doc:
    runs-on: ubuntu-latest

    steps:
      - shell: bash
        run: git config --global core.autocrlf input

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt-get -y install autoconf automake build-essential byacc flex xa65 dos2unix
          sudo apt-get -y install texinfo texlive-fonts-recommended texlive-latex-extra libpcap-dev

  build:
    name: Build
    needs: [create_release, build_doc]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
        - { msystem: MINGW64, arch: x86_64 }
        ui: [ GTK3 ]
    steps:
      - run: git config --global core.autocrlf input
        shell: bash

      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Extract Github Actions Build Script
        shell: bash
        run: |
          mv vice/build/github-actions/build-msys2.sh .
          mv vice/build/github-actions/build-shared.sh .

      - name: Install GTK3 Dependencies if Applicable
        if: ${{ matrix.ui == 'GTK3' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.arch.msystem }}
          update: true
          install: >-
            git
            base-devel
            autotools
            mingw-w64-${{ matrix.arch.arch }}-toolchain
            unzip
            zip
            p7zip
            subversion
            git
            mingw-w64-${{ matrix.arch.arch }}-pkg-config
            mingw-w64-${{ matrix.arch.arch }}-ntldd
            mingw-w64-${{ matrix.arch.arch }}-glew
            mingw-w64-${{ matrix.arch.arch }}-giflib
            mingw-w64-${{ matrix.arch.arch }}-lame
            mingw-w64-${{ matrix.arch.arch }}-libvorbis
            mingw-w64-${{ matrix.arch.arch }}-flac
            mingw-w64-${{ matrix.arch.arch }}-icoutils
            mingw-w64-${{ matrix.arch.arch }}-libpcap
            mingw-w64-${{ matrix.arch.arch }}-libusb
            mingw-w64-${{ matrix.arch.arch }}-curl
            mingw-w64-${{ matrix.arch.arch }}-gtk3

      - name: Build
        id: build
        shell: msys2 {0}
        run: |
          MINGW_INSTALLS=${{ matrix.arch.msystem }} my_build.sh ${{ matrix.ui }} "release"
          echo ::set-output name=seven_zip_path::$(cygpath -w -a vice/*.7z)
          echo ::set-output name=seven_zip_name::$(basename vice/*.7z)

      - name: Upload 7Zip
        id: upload-7zip
        uses: actions/github-script@v6
        env:
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
          ASSET_PATH: ${{ steps.build.outputs.seven_zip_path }}
          ASSET_NAME: ${{ steps.build.outputs.seven_zip_name }}
          ASSET_CONTENT_TYPE: application/x-7z-compressed
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            const fs = require('fs');
            const { UPLOAD_URL, ASSET_PATH, ASSET_NAME, ASSET_CONTENT_TYPE } = process.env;
            const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
              url: UPLOAD_URL,
              headers: {
                'content-type': ASSET_CONTENT_TYPE,
                'content-length': fs.statSync(ASSET_PATH).size
              },
              name: ASSET_NAME,
              data: fs.readFileSync(ASSET_PATH)
            });

  build_deb:
    name: Build Debian Package
    needs: [create_release, build_doc]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
         ui: [ { name: 'GTK3', conf: '--enable-gtk3ui --with-pulse --enable-x64 --enable-x64-image --enable-realdevice --enable-ffmpeg', deps: 'libglew-dev libgtk-3-dev libpulse-dev' }       ]
    steps:
      - shell: bash
        run: git config --global core.autocrlf input

      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y autoconf automake build-essential byacc devscripts dos2unix fakeroot flex xa65
          sudo apt install -y libasound-dev libflac-dev libgif-dev libmp3lame-dev libmpg123-dev libpcap-dev libvorbis-dev libcurl4-openssl-dev
          sudo apt install -y ${{ matrix.ui.deps }}

      - name: Build
        shell: bash
        run: |
          mkdir -p build/usr
          cd vice
          ./src/buildtools/genvicedate_h.sh
          ./autogen.sh
          # ALSA is required for SDL2 as well for midi support
          ./configure --enable-option-checking=fatal --prefix=/usr --enable-arch=no --enable-ethernet --disable-pdf-docs --disable-html-docs --with-fastsid --with-resid --enable-cpuhistory --with-gif --with-png --with-vorbis --with-flac --with-mpg123 --with-lame --enable-midi --with-alsa --with-libcurl ${{ matrix.ui.conf }}
          make -j2 -s --no-print-directory
          # Use install-strip, we want stripped binaries for point releases
          make DESTDIR=$HOME/build install-strip

      - name: Make Deb
        id: make_deb
        shell: bash
        run: ./vice/build/github-actions/build-deb.sh ${{ matrix.ui.name }} release

      - name: Upload Deb
        id: upload_deb
        uses: actions/github-script@v6
        env:
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
          ASSET_PATH: ${{ steps.make_deb.outputs.deb_path }}
          ASSET_NAME: ${{ steps.make_deb.outputs.deb_name }}
          ASSET_CONTENT_TYPE: application/vnd.debian.binary-package
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            const fs = require('fs');
            const { UPLOAD_URL, ASSET_PATH, ASSET_NAME, ASSET_CONTENT_TYPE } = process.env;
            const uploadAssetResponse = await github.rest.repos.uploadReleaseAsset({
              url: UPLOAD_URL,
              headers: {
                'content-type': ASSET_CONTENT_TYPE,
                'content-length': fs.statSync(ASSET_PATH).size
              },
              name: ASSET_NAME,
              data: fs.readFileSync(ASSET_PATH)
            });

  publish_release:
    name: Publish Release
    needs: [create_release, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          retries: 3
          script: |
            await github.rest.repos.updateRelease(
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create_release.outputs.release_id }},
                draft: false
              });
